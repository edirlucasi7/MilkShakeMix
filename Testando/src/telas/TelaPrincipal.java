package telas;


import java.awt.Image;
import java.awt.Graphics;
import javax.swing.ImageIcon;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import db.Conection.Conexao;
import db.Conection.dev.TelaDevDatabase;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.DateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.*;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author icety
 */
public class TelaPrincipal extends javax.swing.JFrame {

    Connection conexao = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    ResultSet rs1 = null;
    Conexao con = new Conexao();
    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        try {
            conexao = Conexao.conector();
        } catch (SQLException ex) {
            Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        TelaLogin u = new TelaLogin();
        u.inserirIcone(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImageIcon icon = new ImageIcon(getClass().getResource("/icones/testeAgora1.png"));
        Image image = icon.getImage();
        desktopPrincipal = new javax.swing.JDesktopPane(){

            public void paintComponent(Graphics g){
                g.drawImage(image, 0, 0, getWidth(), getHeight() ,this);
            }
        };
        lblUsuario = new javax.swing.JLabel();
        lblData = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Menu = new javax.swing.JMenuBar();
        MenuCadastro = new javax.swing.JMenu();
        MenuCadastroProduto = new javax.swing.JMenuItem();
        MenuCadastroProdutoConsumido = new javax.swing.JMenuItem();
        menuCadastroUsuario = new javax.swing.JMenuItem();
        caixaMenu = new javax.swing.JMenu();
        fluxoVendas = new javax.swing.JMenuItem();
        Relatorios = new javax.swing.JMenu();
        MenuRelatorioUsuario = new javax.swing.JMenuItem();
        relatorioInsumos = new javax.swing.JMenuItem();
        RelatorioProdutos = new javax.swing.JMenuItem();
        relatorioVendas = new javax.swing.JMenuItem();
        relatorioVendaDiaria = new javax.swing.JMenuItem();
        InsumosDiario = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        MenuSair = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("X - System MilkShakeMix");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        desktopPrincipal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        desktopPrincipal.setPreferredSize(new java.awt.Dimension(691, 524));

        lblUsuario.setFont(new java.awt.Font("Fira Code SemiBold", 1, 18)); // NOI18N
        lblUsuario.setText("Usuário");

        lblData.setFont(new java.awt.Font("Fira Code SemiBold", 1, 18)); // NOI18N
        lblData.setText("Data");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/logolateral.jpeg"))); // NOI18N

        MenuCadastro.setText("Cadastro");

        MenuCadastroProduto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        MenuCadastroProduto.setText("Produto");
        MenuCadastroProduto.setEnabled(false);
        MenuCadastroProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuCadastroProdutoActionPerformed(evt);
            }
        });
        MenuCadastro.add(MenuCadastroProduto);

        MenuCadastroProdutoConsumido.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        MenuCadastroProdutoConsumido.setText("Insumo");
        MenuCadastroProdutoConsumido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuCadastroProdutoConsumidoActionPerformed(evt);
            }
        });
        MenuCadastro.add(MenuCadastroProdutoConsumido);

        menuCadastroUsuario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        menuCadastroUsuario.setText("Usuário");
        menuCadastroUsuario.setEnabled(false);
        menuCadastroUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCadastroUsuarioActionPerformed(evt);
            }
        });
        MenuCadastro.add(menuCadastroUsuario);

        Menu.add(MenuCadastro);

        caixaMenu.setText("Vendas");
        caixaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caixaMenuActionPerformed(evt);
            }
        });

        fluxoVendas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        fluxoVendas.setText("Caixa");
        fluxoVendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fluxoVendasActionPerformed(evt);
            }
        });
        caixaMenu.add(fluxoVendas);

        Menu.add(caixaMenu);

        Relatorios.setText("Relatório");

        MenuRelatorioUsuario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        MenuRelatorioUsuario.setText("Usuários");
        MenuRelatorioUsuario.setEnabled(false);
        MenuRelatorioUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuRelatorioUsuarioActionPerformed(evt);
            }
        });
        Relatorios.add(MenuRelatorioUsuario);

        relatorioInsumos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        relatorioInsumos.setText("Insumos");
        relatorioInsumos.setEnabled(false);
        relatorioInsumos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioInsumosActionPerformed(evt);
            }
        });
        Relatorios.add(relatorioInsumos);

        RelatorioProdutos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        RelatorioProdutos.setText("Produtos");
        RelatorioProdutos.setEnabled(false);
        RelatorioProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RelatorioProdutosActionPerformed(evt);
            }
        });
        Relatorios.add(RelatorioProdutos);

        relatorioVendas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        relatorioVendas.setText("Vendas");
        relatorioVendas.setEnabled(false);
        relatorioVendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioVendasActionPerformed(evt);
            }
        });
        Relatorios.add(relatorioVendas);

        relatorioVendaDiaria.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        relatorioVendaDiaria.setText("Vendas Diárias");
        relatorioVendaDiaria.setEnabled(false);
        relatorioVendaDiaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioVendaDiariaActionPerformed(evt);
            }
        });
        Relatorios.add(relatorioVendaDiaria);

        InsumosDiario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        InsumosDiario.setText("Insumos Diários");
        InsumosDiario.setEnabled(false);
        InsumosDiario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsumosDiarioActionPerformed(evt);
            }
        });
        Relatorios.add(InsumosDiario);

        Menu.add(Relatorios);

        jMenu3.setText("Opções");

        MenuSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        MenuSair.setText("Sair");
        MenuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSairActionPerformed(evt);
            }
        });
        jMenu3.add(MenuSair);

        Menu.add(jMenu3);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblData)
                            .addComponent(lblUsuario))))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(lblUsuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblData)
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(983, 660));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void MenuCadastroProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuCadastroProdutoActionPerformed
        TelaCadastroProduto produto = new TelaCadastroProduto();
        produto.setVisible(true);
        desktopPrincipal.add(produto);
    }//GEN-LAST:event_MenuCadastroProdutoActionPerformed

    private void MenuCadastroProdutoConsumidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuCadastroProdutoConsumidoActionPerformed
        
        TelaProdutoDiverso usuario = new TelaProdutoDiverso();
        usuario.setVisible(true);
        desktopPrincipal.add(usuario);
    }//GEN-LAST:event_MenuCadastroProdutoConsumidoActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
        Date data = new Date();
        DateFormat formatadorData = DateFormat.getDateInstance(DateFormat.SHORT);
        lblData.setText(formatadorData.format(data));
        
    }//GEN-LAST:event_formWindowActivated

    private void MenuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSairActionPerformed
        
        int sair = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja sair?", "Atenção", JOptionPane.YES_NO_OPTION);
        if(sair == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_MenuSairActionPerformed

    private void MenuRelatorioUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuRelatorioUsuarioActionPerformed
        
        int confirma = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja fazer o download do relatório de usuários?", "Atenção", JOptionPane.YES_NO_OPTION);
            if(confirma==JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(null, "O Download do relatório foi realizado com sucesso e se encontra na Área de Trabalho.");
             
        
        Document doc = new Document();

        String nome_documento = "C:/Users/NaCompra/Desktop/relatorioUsuarios.pdf";

        try {
            //Criando o arquivo, como default tá na pasta do projeto, pra mudar onde salvar o arquivo
            // seria assim : PdfWriter.getInstance(doc, new FileOutputStream('.../nome_documento'));
            PdfWriter.getInstance(doc, new FileOutputStream(nome_documento));

            doc.open();
            doc.setPageSize(PageSize.A4);
            
            Paragraph p = new Paragraph();
            p.add("RELATÓRIO DE USUÁRIOS CADASTRADOS");
            p.setAlignment(Element.ALIGN_CENTER);
            p.setIndentationLeft(18);
            p.setFirstLineIndent(-18);
            
            doc.add(p);
            doc.add(new Paragraph(" "));
            
            //Criando tabela  com 5 colunas
            PdfPTable tabela = new PdfPTable(5);

            //Criando cabeçalho pra tabela
            PdfPCell cabecalho = new PdfPCell(new Paragraph("Lista de Usuários Cadastrados"));
            //Alinahando o texto deste cabeçalho ao centro da tabela
            cabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
            //Aqui ele seta o tamanho deste cabeçalho para as 5 colunas
            cabecalho.setColspan(5);

            //Criando os cabeçalhos dos dados do banco
            PdfPCell cabecalhoId = new PdfPCell(new Paragraph("Código"));
            PdfPCell cabecalhoLogin = new PdfPCell(new Paragraph("Login"));
            PdfPCell cabecalhoNome = new PdfPCell(new Paragraph("Nome"));
            PdfPCell cabecalhoSenha = new PdfPCell(new Paragraph("Senha"));
            PdfPCell cabecalhoPerfil = new PdfPCell(new Paragraph("Perfil"));

            //Adicionando a tabela todos os cabeçalhos
            tabela.addCell(cabecalho);
            tabela.addCell(cabecalhoId);
            tabela.addCell(cabecalhoLogin);
            tabela.addCell(cabecalhoNome);
            tabela.addCell(cabecalhoSenha);
            tabela.addCell(cabecalhoPerfil);

            conexao = Conexao.conector();
            ResultSet rs = con.ConsultarAllUsuarios();
            int id = 0;
            String _login = null, _nome = null, _senha = null, _perfil = null;

            while(rs.next()){
                id = rs.getInt("id");
                _login = rs.getString("login");
                _nome = rs.getString("nome");
                _senha = rs.getString("senha");
                _perfil = rs.getString("perfil");

                //Convertendo o id para string
                String identificadorProduto = String.valueOf(id);

                //Adicionando as linhas da tabela com os dados do banco
                tabela.addCell(identificadorProduto);
                tabela.addCell(_login);
                tabela.addCell(_nome);
                tabela.addCell(_senha);
                tabela.addCell(_perfil);

            }

            //Adicionando a tabela ao documento pdf
            doc.add(tabela);
            PreparedStatement pst = null;

        } catch (FileNotFoundException | DocumentException | SQLException ex) {
            Logger.getLogger(TelaDevDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            //Fecha a configuração do documento
            doc.close();
        }
            }
    }//GEN-LAST:event_MenuRelatorioUsuarioActionPerformed

    private void menuCadastroUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCadastroUsuarioActionPerformed
        // abri a tela de geral do usuário
        TelaUsuario usuario = new TelaUsuario();
        usuario.setVisible(true);
        desktopPrincipal.add(usuario);
    }//GEN-LAST:event_menuCadastroUsuarioActionPerformed

    private void caixaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caixaMenuActionPerformed
         
    }//GEN-LAST:event_caixaMenuActionPerformed

    private void fluxoVendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fluxoVendasActionPerformed
        TelaCaixa caixa = new TelaCaixa();
        caixa.setVisible(true);
        desktopPrincipal.add(caixa);
    }//GEN-LAST:event_fluxoVendasActionPerformed

    private void relatorioInsumosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioInsumosActionPerformed
       
        int opcao = JOptionPane.showConfirmDialog(null, "Deseja efetuar o download do relatório entre duas datas ?");
        
        if(opcao == JOptionPane.YES_OPTION){
        
           GregorianCalendar calendar = new GregorianCalendar();
            int dia = calendar.get(GregorianCalendar.DAY_OF_MONTH);
            int ano = calendar.get(GregorianCalendar.YEAR);
            int mes = calendar.get(Calendar.MONTH) + 1;
            calendar.add(Calendar.DAY_OF_MONTH, 1);
            
            Date amanhaCalendar = calendar.getTime();
            String amanhaTexto = "" + amanhaCalendar;
            
            String amanha = amanhaTexto.substring(8,10);
            
            String dataAtual;
            
            if(dia < 10 && mes <= 9){
                dataAtual = "0" + dia + "/0" + mes + "/" + ano;
            }else{
                dataAtual = dia + "/" + mes + "/" + ano;
            }
            
            String dataAmanha;
           
             if(mes <= 9){
                dataAmanha = amanha + "/0" + mes + "/" + ano;
            }else{
                dataAmanha = amanha + "/" + mes + "/" + ano;
            }
            
             String data1 = JOptionPane.showInputDialog(null, "Ex : " + dataAtual , "Data de inicio", JOptionPane.QUESTION_MESSAGE);
             String data2 = JOptionPane.showInputDialog(null, "Ex : " + dataAmanha , "Data de fim", JOptionPane.QUESTION_MESSAGE);
            
        String calendarioData1Ano = data1.substring(6,10);
        String calendarioData1Mes = data1.substring(3,5); 
        String calendarioData1Dia = data1.substring(0,2);
        
        String calendarioData2Ano = data2.substring(6,10);
        String calendarioData2Mes = data2.substring(3,5); 
        String calendarioData2Dia = data2.substring(0,2);

          
        String calendarioDataInicio = calendarioData1Ano + "-" + calendarioData1Mes + "-" + calendarioData1Dia;
        String calendarioDataFim = calendarioData2Ano + "-" + calendarioData2Mes + "-" + calendarioData2Dia;
        
        Document doc = new Document();
        String caminhoArquivoProjeto = "relatorioInsumos(_'"+calendarioDataInicio+"' até _'"+calendarioDataFim+"'_).pdf";
        String caminhoWindows = "C:/Users/NaCompra/Desktop/relatorioInsumos(_'"+calendarioDataInicio+"' até _'"+calendarioDataFim+"'_).pdf";

        String nome_documento = caminhoWindows; 

        try {
            //Criando o arquivo, como default tá na pasta do projeto, pra mudar onde salvar o arquivo
            // seria assim : PdfWriter.getInstance(doc, new FileOutputStream('.../nome_documento'));
            PdfWriter.getInstance(doc, new FileOutputStream(nome_documento));

            doc.open();
            doc.setPageSize(PageSize.A4);
            
            Paragraph p = new Paragraph();
            p.add("RELATÓRIO DE INSUMOS");
            p.setAlignment(Element.ALIGN_CENTER);
            p.setIndentationLeft(18);
            p.setFirstLineIndent(-18);
            
            doc.add(p);
            doc.add(new Paragraph(" "));
            
            //Criando tabela  com 4 colunas
            PdfPTable tabela = new PdfPTable(5);

            //Criando cabeçalho pra tabela
            PdfPCell cabecalho = new PdfPCell(new Paragraph("Lista de Insumos"));
            //Alinahando o texto deste cabeçalho ao centro da tabela
            cabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
            //Aqui ele seta o tamanho deste cabeçalho para as 4 colunas
            cabecalho.setColspan(5);

            //Criando os cabeçalhos dos dados do banco
            PdfPCell cabecalhoId = new PdfPCell(new Paragraph("Código"));
            PdfPCell cabecalhoNome = new PdfPCell(new Paragraph("Nome"));
            PdfPCell cabecalhoPreco = new PdfPCell(new Paragraph("Preço"));
            PdfPCell cabecalhoQuantidade = new PdfPCell(new Paragraph("Quantidade"));
            PdfPCell cabecalhoData = new PdfPCell(new Paragraph("data"));

            //Adicionando a tabela todos os cabeçalhos
            tabela.addCell(cabecalho);
            tabela.addCell(cabecalhoId);
            tabela.addCell(cabecalhoNome);
            tabela.addCell(cabecalhoPreco);
            tabela.addCell(cabecalhoQuantidade);
            tabela.addCell(cabecalhoData);

            conexao = Conexao.conector();
            ResultSet rs = con.ConsultarInsumosEntreDatas(calendarioDataInicio, calendarioDataFim);
            ResultSet rs1 = con.ConsultarTotalValorInsumosEntreDuasDatas(calendarioDataInicio, calendarioDataFim);
            int id = 0;
            String _nome = null, _preco = null, _quantidade = null, _data = null;

            while(rs.next()){
                id = rs.getInt("id");
                _nome = rs.getString("nomeproduto");
                _preco = rs.getString("preco");
                _quantidade = rs.getString("quantidade");
                _data = rs.getString("data");
                
                //Convertendo o id para string
                String identificadorProduto = String.valueOf(id);

                //Adicionando as linhas da tabela com os dados do banco
                tabela.addCell(identificadorProduto);
                tabela.addCell(_nome);
                tabela.addCell(_preco);
                tabela.addCell(_quantidade);
                tabela.addCell(_data);
                
            }
            
            PdfPTable tabela1 = new PdfPTable(1);
            
            PdfPCell cabecalho1 = new PdfPCell(new Paragraph("Valor Total dos Insumos Cadastradas"));
            cabecalho1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho1.setColspan(1);
            
            PdfPCell cabecalho1Total = new PdfPCell(new Paragraph("Total:"));
            cabecalho1Total.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            tabela1.addCell(cabecalho1);
            tabela1.addCell(cabecalho1Total);
////
            String _total = "";
            
            while(rs1.next()) {
                _total = rs1.getString("total");                
                
                tabela1.addCell("                                  ------------------ " + _total + " R$" + " ------------------"); 
                
            }

            //Adicionando a tabela ao documento pdf
            doc.add(tabela);
            doc.add(tabela1);
            PreparedStatement pst = null;

        } catch (FileNotFoundException | DocumentException | SQLException ex) {
            Logger.getLogger(TelaDevDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            //Fecha a configuração do documento
             JOptionPane.showMessageDialog(null, "O Download do relatório foi realizado com sucesso e se encontra na Área de Trabalho.");
            
            doc.close();
        }
            
        }else{
            int confirma = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja fazer o download do relatório de insumos?", "Atenção", JOptionPane.YES_NO_OPTION);
            if(confirma==JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(null, "O Download do relatório foi realizado com sucesso e se encontra na Área de Trabalho.");
            
        
        Document doc = new Document();
        String caminhoArquivoProjeto = "relatorioInsumos.pdf";
        String caminhoWindows = "C:/Users/NaCompra/Desktop/relatorioInsumos.pdf";

        String nome_documento = caminhoArquivoProjeto;

        try {
            //Criando o arquivo, como default tá na pasta do projeto, pra mudar onde salvar o arquivo
            // seria assim : PdfWriter.getInstance(doc, new FileOutputStream('.../nome_documento'));
            PdfWriter.getInstance(doc, new FileOutputStream(nome_documento));

            doc.open();
            doc.setPageSize(PageSize.A4);
            
            Paragraph p = new Paragraph();
            p.add("RELATÓRIO DE INSUMOS");
            p.setAlignment(Element.ALIGN_CENTER);
            p.setIndentationLeft(18);
            p.setFirstLineIndent(-18);
            
            doc.add(p);
            doc.add(new Paragraph(" "));
            
            //Criando tabela  com 4 colunas
            PdfPTable tabela = new PdfPTable(5);

            //Criando cabeçalho pra tabela
            PdfPCell cabecalho = new PdfPCell(new Paragraph("Lista de Insumos"));
            //Alinahando o texto deste cabeçalho ao centro da tabela
            cabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
            //Aqui ele seta o tamanho deste cabeçalho para as 4 colunas
            cabecalho.setColspan(5);

            //Criando os cabeçalhos dos dados do banco
            PdfPCell cabecalhoId = new PdfPCell(new Paragraph("Código"));
            PdfPCell cabecalhoNome = new PdfPCell(new Paragraph("Nome"));
            PdfPCell cabecalhoPreco = new PdfPCell(new Paragraph("Preço"));
            PdfPCell cabecalhoQuantidade = new PdfPCell(new Paragraph("Quantidade"));
            PdfPCell cabecalhoData = new PdfPCell(new Paragraph("data"));

            //Adicionando a tabela todos os cabeçalhos
            tabela.addCell(cabecalho);
            tabela.addCell(cabecalhoId);
            tabela.addCell(cabecalhoNome);
            tabela.addCell(cabecalhoPreco);
            tabela.addCell(cabecalhoQuantidade);
            tabela.addCell(cabecalhoData);

            conexao = Conexao.conector();
            ResultSet rs = con.ConsultarAllInsumos();
            ResultSet rs1 = con.ConsultarTotalValorInsumos();
            int id = 0;
            String _nome = null, _preco = null, _quantidade = null, _data = null;

            while(rs.next()){
                id = rs.getInt("id");
                _nome = rs.getString("nomeproduto");
                _preco = rs.getString("preco");
                _quantidade = rs.getString("quantidade");
                _data = rs.getString("data");
                
                //Convertendo o id para string
                String identificadorProduto = String.valueOf(id);

                //Adicionando as linhas da tabela com os dados do banco
                tabela.addCell(identificadorProduto);
                tabela.addCell(_nome);
                tabela.addCell(_preco);
                tabela.addCell(_quantidade);
                tabela.addCell(_data);

            }
            
            PdfPTable tabela1 = new PdfPTable(1);
            
            PdfPCell cabecalho1 = new PdfPCell(new Paragraph("Valor Total dos Insumos Cadastradas"));
            cabecalho1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho1.setColspan(1);
            
            PdfPCell cabecalho1Total = new PdfPCell(new Paragraph("Total:"));
            cabecalho1Total.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            tabela1.addCell(cabecalho1);
            tabela1.addCell(cabecalho1Total);

            String _total = null;
            
            while(rs1.next()) {
                _total = rs1.getString("total");                
                
                tabela1.addCell("                                  ------------------ " + _total + " R$" + " ------------------"); 
                
            }

            //Adicionando a tabela ao documento pdf
            doc.add(tabela);
            doc.add(tabela1);
            PreparedStatement pst = null;

        } catch (FileNotFoundException | DocumentException | SQLException ex) {
            Logger.getLogger(TelaDevDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            //Fecha a configuração do documento
            doc.close();
        }
            }
        }
        
        
    }//GEN-LAST:event_relatorioInsumosActionPerformed

    private void RelatorioProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RelatorioProdutosActionPerformed
       
        int confirma = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja fazer o download do relatório de produtos?", "Atenção", JOptionPane.YES_NO_OPTION);
            if(confirma==JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(null, "O Download do relatório foi realizado com sucesso e se encontra na Área de Trabalho.");
            
        
        Document doc = new Document();

        String nome_documento = "C:/Users/NaCompra/Desktop/relatorioProdutos.pdf";

        try {
            //Criando o arquivo, como default tá na pasta do projeto, pra mudar onde salvar o arquivo
            // seria assim : PdfWriter.getInstance(doc, new FileOutputStream('.../nome_documento'));
            PdfWriter.getInstance(doc, new FileOutputStream(nome_documento));

            doc.open();
            doc.setPageSize(PageSize.A4);
            
            Paragraph p = new Paragraph();
            p.add("RELATÓRIO DE PRODUTOS");
            p.setAlignment(Element.ALIGN_CENTER);
            p.setIndentationLeft(18);
            p.setFirstLineIndent(-18);
            
            doc.add(p);
            doc.add(new Paragraph(" "));
            
            //Criando tabela  com 4 colunas
            PdfPTable tabela = new PdfPTable(5);

            //Criando cabeçalho pra tabela
            PdfPCell cabecalho = new PdfPCell(new Paragraph("Lista de Produtos Cadastrados"));
            //Alinahando o texto deste cabeçalho ao centro da tabela
            cabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
            //Aqui ele seta o tamanho deste cabeçalho para as 5 colunas
            cabecalho.setColspan(5);

            //Criando os cabeçalhos dos dados do banco
            PdfPCell cabecalhoId = new PdfPCell(new Paragraph("Código"));
            PdfPCell cabecalhoNome = new PdfPCell(new Paragraph("Nome"));
            PdfPCell cabecalhoPreco = new PdfPCell(new Paragraph("Preço"));
            PdfPCell cabecalhoTamanho = new PdfPCell(new Paragraph("Tamanho"));
            PdfPCell cabecalhoEspecial = new PdfPCell(new Paragraph("Especial"));

            //Adicionando a tabela todos os cabeçalhos
            tabela.addCell(cabecalho);
            tabela.addCell(cabecalhoId);
            tabela.addCell(cabecalhoNome);
            tabela.addCell(cabecalhoPreco);
            tabela.addCell(cabecalhoTamanho);
            tabela.addCell(cabecalhoEspecial);

            conexao = Conexao.conector();
            ResultSet rs = con.ConsultarAllProduto();
            int id = 0;
            String _nome = null, _preco = null, _tamanho = null, _especial = null;

            while(rs.next()){
                id = rs.getInt("id");
                _nome = rs.getString("nomeproduto");
                _preco = rs.getString("preco");
                _tamanho = rs.getString("tamanho");
                _especial = rs.getString("especial");                
                
                //Convertendo o id para string
                String identificadorProduto = String.valueOf(id);

                //Adicionando as linhas da tabela com os dados do banco
                tabela.addCell(identificadorProduto);
                tabela.addCell(_nome);
                tabela.addCell(_preco);
                tabela.addCell(_tamanho);
                tabela.addCell(_especial);

            }

            //Adicionando a tabela ao documento pdf
            doc.add(tabela);
            PreparedStatement pst = null;

        } catch (FileNotFoundException | DocumentException | SQLException ex) {
            Logger.getLogger(TelaDevDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            //Fecha a configuração do documento
            doc.close();
        }
            }
    }//GEN-LAST:event_RelatorioProdutosActionPerformed

    private void relatorioVendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioVendasActionPerformed

        
        int opcao = JOptionPane.showConfirmDialog(null, "Deseja efetuar o download do relatório de vendas entre duas datas ?");

        if(opcao == JOptionPane.YES_OPTION){
            
        GregorianCalendar calendar = new GregorianCalendar();
            int dia = calendar.get(GregorianCalendar.DAY_OF_MONTH);
            int ano = calendar.get(GregorianCalendar.YEAR);
            int mes = calendar.get(Calendar.MONTH) + 1;
            calendar.add(Calendar.DAY_OF_MONTH, 1);
            
            Date amanhaCalendar = calendar.getTime();
            String amanhaTexto = "" + amanhaCalendar;
            
            String amanha = amanhaTexto.substring(8,10);
            
            String dataAtual;
            
            if(dia < 10 && mes <= 9){
                dataAtual = "0" + dia + "/0" + mes + "/" + ano;
            }else{
                dataAtual = dia + "/" + mes + "/" + ano;
            }
            
            String dataAmanha;
           
             if(mes <= 9){
                dataAmanha = amanha + "/0" + mes + "/" + ano;
            }else{
                dataAmanha = amanha + "/" + mes + "/" + ano;
            }
            
             String data1 = JOptionPane.showInputDialog(null, "Ex : " + dataAtual , "Data de inicio", JOptionPane.QUESTION_MESSAGE);
             String data2 = JOptionPane.showInputDialog(null, "Ex : " + dataAmanha , "Data de fim", JOptionPane.QUESTION_MESSAGE);
            
        String calendarioData1Ano = data1.substring(6,10);
        String calendarioData1Mes = data1.substring(3,5); 
        String calendarioData1Dia = data1.substring(0,2);
        
        String calendarioData2Ano = data2.substring(6,10);
        String calendarioData2Mes = data2.substring(3,5); 
        String calendarioData2Dia = data2.substring(0,2);

          
        String calendarioDataInicio = calendarioData1Ano + "-" + calendarioData1Mes + "-" + calendarioData1Dia;
        String calendarioDataFim = calendarioData2Ano + "-" + calendarioData2Mes + "-" + calendarioData2Dia;
        
        Document doc = new Document();
        String caminhoArquivoProjeto = "relatorioVendas(_'"+calendarioDataInicio+"' até _'"+calendarioDataFim+"'_).pdf";
        String caminhoWindows = "C:/Users/NaCompra/Desktop/relatorioVendas(_'"+calendarioDataInicio+"' até _'"+calendarioDataFim+"'_).pdf";

        String nome_documento = caminhoArquivoProjeto;
        
        
        try {
            //Criando o arquivo, como default tá na pasta do projeto, pra mudar onde salvar o arquivo
            // seria assim : PdfWriter.getInstance(doc, new FileOutputStream('.../nome_documento'));
            PdfWriter.getInstance(doc, new FileOutputStream(nome_documento));

            doc.open();
            doc.setPageSize(PageSize.A4);
            
            Paragraph p = new Paragraph();
            p.add("RELATÓRIO DE VENDAS");
            p.setAlignment(Element.ALIGN_CENTER);
            p.setIndentationLeft(18);
            p.setFirstLineIndent(-18);
            
            doc.add(p);
            doc.add(new Paragraph(" "));
            
            //Criando tabela  com 4 colunas
            PdfPTable tabela = new PdfPTable(4);

            //Criando cabeçalho pra tabela
            PdfPCell cabecalho = new PdfPCell(new Paragraph("Lista de Vendas Cadastradas"));
            //Alinahando o texto deste cabeçalho ao centro da tabela
            cabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
            //Aqui ele seta o tamanho deste cabeçalho para as 4 colunas
            cabecalho.setColspan(4);

            //Criando os cabeçalhos dos dados do banco
            PdfPCell cabecalhoId = new PdfPCell(new Paragraph("Código"));
            PdfPCell cabecalhoValor = new PdfPCell(new Paragraph("Valor"));
            PdfPCell cabecalhoTipo = new PdfPCell(new Paragraph("Tipo"));
            PdfPCell cabecalhoData = new PdfPCell(new Paragraph("Data"));
//            PdfPCell cabecalhoTotal = new PdfPCell(new Paragraph("Total"));

            //Adicionando a tabela todos os cabeçalhos
            tabela.addCell(cabecalho);
            tabela.addCell(cabecalhoId);
            tabela.addCell(cabecalhoValor);
            tabela.addCell(cabecalhoTipo);
            tabela.addCell(cabecalhoData);
//            tabela.addCell(cabecalhoTotal);

            conexao = Conexao.conector();
            ResultSet rs = con.ConsultarVendasEntreDuasDatas(calendarioDataInicio, calendarioDataFim);
            ResultSet rs1 = con.ConsultarTotalVendasEntreDuasDatas(calendarioDataInicio, calendarioDataFim);
            int id = 0;
            String _valor = null, _data = null, _tipo = null;
             

            while(rs.next()){
                id = rs.getInt("id");
                _valor = rs.getString("valor");
                _tipo = rs.getString("tipo"); 
                _data = rs.getString("data");
                
                
                //Convertendo o id para string
                String identificadorProduto = String.valueOf(id);

                //Adicionando as linhas da tabela com os dados do banco
                tabela.addCell(identificadorProduto);
                tabela.addCell(_valor);
                tabela.addCell(_tipo);
                tabela.addCell(_data); 
                
            }
            
            PdfPTable tabela1 = new PdfPTable(1);
            
            PdfPCell cabecalho1 = new PdfPCell(new Paragraph("Valor Total das Vendas Cadastradas"));
            cabecalho1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho1.setColspan(1);
            
            PdfPCell cabecalho1Total = new PdfPCell(new Paragraph("Total:"));
            cabecalho1Total.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            tabela1.addCell(cabecalho1);
            tabela1.addCell(cabecalho1Total);

            String _total = null;
            
            while(rs1.next()) {
                _total = rs1.getString("total");                
                
                tabela1.addCell("                                  ------------------ " + _total + " R$" + " ------------------"); 
                
            }

            //Adicionando a tabela ao documento pdf
            doc.add(tabela);
            doc.add(tabela1);
            PreparedStatement pst = null;

        } catch (FileNotFoundException | DocumentException | SQLException ex) {
            Logger.getLogger(TelaDevDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            //Fecha a configuração do documento
            doc.close();
        }
            
            
        }else{
            int confirma = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja fazer o download do relatório de vendas?", "Atenção", JOptionPane.YES_NO_OPTION);
            if(confirma==JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(null, "O Download do relatório foi realizado com sucesso e se encontra na Área de Trabalho.");
            
        
        Document doc = new Document();

        String nome_documento = "C:/Users/NaCompra/Desktop/relatorioVendas.pdf";

        try {
            //Criando o arquivo, como default tá na pasta do projeto, pra mudar onde salvar o arquivo
            // seria assim : PdfWriter.getInstance(doc, new FileOutputStream('.../nome_documento'));
            PdfWriter.getInstance(doc, new FileOutputStream(nome_documento));

            doc.open();
            doc.setPageSize(PageSize.A4);
            
            Paragraph p = new Paragraph();
            p.add("RELATÓRIO DE VENDAS");
            p.setAlignment(Element.ALIGN_CENTER);
            p.setIndentationLeft(18);
            p.setFirstLineIndent(-18);
            
            doc.add(p);
            doc.add(new Paragraph(" "));
            
            //Criando tabela  com 4 colunas
            PdfPTable tabela = new PdfPTable(4);

            //Criando cabeçalho pra tabela
            PdfPCell cabecalho = new PdfPCell(new Paragraph("Lista de Vendas Cadastradas"));
            //Alinahando o texto deste cabeçalho ao centro da tabela
            cabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
            //Aqui ele seta o tamanho deste cabeçalho para as 4 colunas
            cabecalho.setColspan(4);

            //Criando os cabeçalhos dos dados do banco
            PdfPCell cabecalhoId = new PdfPCell(new Paragraph("Código"));
            PdfPCell cabecalhoValor = new PdfPCell(new Paragraph("Valor"));
            PdfPCell cabecalhoTipo = new PdfPCell(new Paragraph("Tipo"));
            PdfPCell cabecalhoData = new PdfPCell(new Paragraph("Data"));
//            PdfPCell cabecalhoTotal = new PdfPCell(new Paragraph("Total"));

            //Adicionando a tabela todos os cabeçalhos
            tabela.addCell(cabecalho);
            tabela.addCell(cabecalhoId);
            tabela.addCell(cabecalhoValor);
            tabela.addCell(cabecalhoTipo);
            tabela.addCell(cabecalhoData);
//            tabela.addCell(cabecalhoTotal);

            conexao = Conexao.conector();
            ResultSet rs = con.ConsultarAllVendas();
            ResultSet rs1 = con.ConsultarTotalValorVendas();
            int id = 0;
            String _valor = null, _data = null, _tipo = null;
             

            while(rs.next()){
                id = rs.getInt("id");
                _valor = rs.getString("valor");
                _tipo = rs.getString("tipo"); 
                _data = rs.getString("data");
                
                
                //Convertendo o id para string
                String identificadorProduto = String.valueOf(id);

                //Adicionando as linhas da tabela com os dados do banco
                tabela.addCell(identificadorProduto);
                tabela.addCell(_valor);
                tabela.addCell(_tipo);
                tabela.addCell(_data); 
                
            }
            
            PdfPTable tabela1 = new PdfPTable(1);
            
            PdfPCell cabecalho1 = new PdfPCell(new Paragraph("Valor Total das Vendas Cadastradas"));
            cabecalho1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho1.setColspan(1);
            
            PdfPCell cabecalho1Total = new PdfPCell(new Paragraph("Total:"));
            cabecalho1Total.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            tabela1.addCell(cabecalho1);
            tabela1.addCell(cabecalho1Total);

            String _total = null;
            
            while(rs1.next()) {
                _total = rs1.getString("total");                
                
                tabela1.addCell("                                  ------------------ " + _total + " R$" + " ------------------"); 
                
            }

            //Adicionando a tabela ao documento pdf
            doc.add(tabela);
            doc.add(tabela1);
            PreparedStatement pst = null;

        } catch (FileNotFoundException | DocumentException | SQLException ex) {
            Logger.getLogger(TelaDevDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            //Fecha a configuração do documento
            doc.close();
        }
            } 
        }
        
        
    }//GEN-LAST:event_relatorioVendasActionPerformed

    private void relatorioVendaDiariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioVendaDiariaActionPerformed
        
        java.util.Date data = new java.util.Date();
        DateFormat formatadorData = DateFormat.getDateInstance(DateFormat.SHORT);
        String dataAtual = formatadorData.format(data);
        
        int confirma = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja fazer o download do relatório de vendas de hoje?", "Atenção", JOptionPane.YES_NO_OPTION);
            if(confirma==JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(null, "O Download do relatório foi realizado com sucesso e se encontra na Área de Trabalho.");
            
        
        Document doc = new Document();

        String nome_documento = "C:/Users/NaCompra/Desktop/relatorioVendasDiaria.pdf";

        try {
            //Criando o arquivo, como default tá na pasta do projeto, pra mudar onde salvar o arquivo
            // seria assim : PdfWriter.getInstance(doc, new FileOutputStream('.../nome_documento'));
            PdfWriter.getInstance(doc, new FileOutputStream(nome_documento));

            doc.open();
            doc.setPageSize(PageSize.A4);
            
            Paragraph p = new Paragraph();
            p.add("RELATÓRIO DE VENDAS");
            p.setAlignment(Element.ALIGN_CENTER);
            p.setIndentationLeft(18);
            p.setFirstLineIndent(-18);
            
            doc.add(p);
            doc.add(new Paragraph(" "));
            
            //Criando tabela  com 4 colunas
            PdfPTable tabela = new PdfPTable(4);

            //Criando cabeçalho pra tabela
            PdfPCell cabecalho = new PdfPCell(new Paragraph("Lista de Vendas Cadastradas no data: " + dataAtual));
            //Alinahando o texto deste cabeçalho ao centro da tabela
            cabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
            //Aqui ele seta o tamanho deste cabeçalho para as 4 colunas
            cabecalho.setColspan(4);

            //Criando os cabeçalhos dos dados do banco
            PdfPCell cabecalhoId = new PdfPCell(new Paragraph("Código"));
            PdfPCell cabecalhoValor = new PdfPCell(new Paragraph("Valor"));
            PdfPCell cabecalhoTipo = new PdfPCell(new Paragraph("Tipo"));
            PdfPCell cabecalhoData = new PdfPCell(new Paragraph("Data"));
//            PdfPCell cabecalhoTotal = new PdfPCell(new Paragraph("Total"));

            //Adicionando a tabela todos os cabeçalhos
            tabela.addCell(cabecalho);
            tabela.addCell(cabecalhoId);
            tabela.addCell(cabecalhoValor);
            tabela.addCell(cabecalhoTipo);
            tabela.addCell(cabecalhoData);
//            tabela.addCell(cabecalhoTotal);

            conexao = Conexao.conector();
            ResultSet rs = con.ConsultarVendasDiarias();
            ResultSet rs1 = con.ConsultarTotalValorVendasDiarias();
            int id = 0;
            String _valor = null, _data = null, _tipo = null;
             

            while(rs.next()){
                id = rs.getInt("id");
                _valor = rs.getString("valor");
                _tipo = rs.getString("tipo"); 
                _data = rs.getString("data");
                
                
                //Convertendo o id para string
                String identificadorProduto = String.valueOf(id);

                //Adicionando as linhas da tabela com os dados do banco
                tabela.addCell(identificadorProduto);
                tabela.addCell(_valor);
                tabela.addCell(_tipo);
                tabela.addCell(_data); 
                
            }
            
            PdfPTable tabela1 = new PdfPTable(1);
            
            PdfPCell cabecalho1 = new PdfPCell(new Paragraph("Valor Total das Vendas Cadastradas"));
            cabecalho1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho1.setColspan(1);
            
            PdfPCell cabecalho1Total = new PdfPCell(new Paragraph("Total:"));
            cabecalho1Total.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            tabela1.addCell(cabecalho1);
            tabela1.addCell(cabecalho1Total);

            String _total = null;
            
            while(rs1.next()) {
                _total = rs1.getString("total");                
                
                tabela1.addCell("                                  ------------------ " + _total + " R$" + " ------------------"); 
                
            }

            //Adicionando a tabela ao documento pdf
            doc.add(tabela);
            doc.add(tabela1);
            PreparedStatement pst = null;

        } catch (FileNotFoundException | DocumentException | SQLException ex) {
            Logger.getLogger(TelaDevDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            //Fecha a configuração do documento
            doc.close();
        }
            }
    }//GEN-LAST:event_relatorioVendaDiariaActionPerformed

    private void InsumosDiarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsumosDiarioActionPerformed
        
        java.util.Date data = new java.util.Date();
        DateFormat formatadorData = DateFormat.getDateInstance(DateFormat.SHORT);
        String dataTeste = formatadorData.format(data);
        
        int confirma = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja fazer o download do relatório de insumos de hoje?", "Atenção", JOptionPane.YES_NO_OPTION);
            if(confirma==JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(null, "O Download do relatório foi realizado com sucesso e se encontra na Área de Trabalho.");
            
        
        Document doc = new Document();

        String nome_documento = "C:/Users/NaCompra/Desktop/relatorioInsumosDiaria.pdf";

        try {
            //Criando o arquivo, como default tá na pasta do projeto, pra mudar onde salvar o arquivo
            // seria assim : PdfWriter.getInstance(doc, new FileOutputStream('.../nome_documento'));
            PdfWriter.getInstance(doc, new FileOutputStream(nome_documento));

            doc.open();
            doc.setPageSize(PageSize.A4);
            
            Paragraph p = new Paragraph();
            p.add("RELATÓRIO DE INSUMOS");
            p.setAlignment(Element.ALIGN_CENTER);
            p.setIndentationLeft(18);
            p.setFirstLineIndent(-18);
            
            doc.add(p);
            doc.add(new Paragraph(" "));
            
            //Criando tabela  com 4 colunas
            PdfPTable tabela = new PdfPTable(5);

            //Criando cabeçalho pra tabela
            PdfPCell cabecalho = new PdfPCell(new Paragraph("Lista de Insumos Cadastrados no data: " + dataTeste));
            //Alinahando o texto deste cabeçalho ao centro da tabela
            cabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
            //Aqui ele seta o tamanho deste cabeçalho para as 4 colunas
            cabecalho.setColspan(5);

           //Criando os cabeçalhos dos dados do banco
            PdfPCell cabecalhoId = new PdfPCell(new Paragraph("Código"));
            PdfPCell cabecalhoNome = new PdfPCell(new Paragraph("Nome"));
            PdfPCell cabecalhoPreco = new PdfPCell(new Paragraph("Preço"));
            PdfPCell cabecalhoQuantidade = new PdfPCell(new Paragraph("Quantidade"));
            PdfPCell cabecalhoData = new PdfPCell(new Paragraph("Data"));

            //Adicionando a tabela todos os cabeçalhos
            tabela.addCell(cabecalho);
            tabela.addCell(cabecalhoId);
            tabela.addCell(cabecalhoNome);
            tabela.addCell(cabecalhoPreco);
            tabela.addCell(cabecalhoQuantidade);
            tabela.addCell(cabecalhoData);

            conexao = Conexao.conector();
            ResultSet rs = con.ConsultarInsumosDiarias();
            ResultSet rs1 = con.ConsultarDiariaValorTotalInsumos();
            int id = 0;
            String _nome = null, _preco = null, _quantidade = null, _data = null;

            while(rs.next()){
                id = rs.getInt("id");
                _nome = rs.getString("nomeproduto");
                _preco = rs.getString("preco");
                _quantidade = rs.getString("quantidade");
                _data = rs.getString("data");
                
                //Convertendo o id para string
                String identificadorProduto = String.valueOf(id);

                //Adicionando as linhas da tabela com os dados do banco
                tabela.addCell(identificadorProduto);
                tabela.addCell(_nome);
                tabela.addCell(_preco);
                tabela.addCell(_quantidade);
                tabela.addCell(_data);

            }
            
            PdfPTable tabela1 = new PdfPTable(1);
            
            PdfPCell cabecalho1 = new PdfPCell(new Paragraph("Valor Total dos Insumos Cadastrados"));
            cabecalho1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho1.setColspan(1);
            
            PdfPCell cabecalho1Total = new PdfPCell(new Paragraph("Total:"));
            cabecalho1Total.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            tabela1.addCell(cabecalho1);
            tabela1.addCell(cabecalho1Total);

            String _total = null;
            
            while(rs1.next()) {
                _total = rs1.getString("total");                
                
                tabela1.addCell("                                  ------------------ " + _total + " R$" + " ------------------"); 
                
            }

            //Adicionando a tabela ao documento pdf
            doc.add(tabela);
            doc.add(tabela1);
            PreparedStatement pst = null;

        } catch (FileNotFoundException | DocumentException | SQLException ex) {
            Logger.getLogger(TelaDevDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            //Fecha a configuração do documento
            doc.close();
        }
            }
        
    }//GEN-LAST:event_InsumosDiarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JMenuItem InsumosDiario;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JMenu MenuCadastro;
    public static javax.swing.JMenuItem MenuCadastroProduto;
    private javax.swing.JMenuItem MenuCadastroProdutoConsumido;
    public static javax.swing.JMenuItem MenuRelatorioUsuario;
    private javax.swing.JMenuItem MenuSair;
    public static javax.swing.JMenuItem RelatorioProdutos;
    private javax.swing.JMenu Relatorios;
    private javax.swing.JMenu caixaMenu;
    private javax.swing.JDesktopPane desktopPrincipal;
    private javax.swing.JMenuItem fluxoVendas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JLabel lblData;
    public static javax.swing.JLabel lblUsuario;
    public static javax.swing.JMenuItem menuCadastroUsuario;
    public static javax.swing.JMenuItem relatorioInsumos;
    public static javax.swing.JMenuItem relatorioVendaDiaria;
    public static javax.swing.JMenuItem relatorioVendas;
    // End of variables declaration//GEN-END:variables
}
